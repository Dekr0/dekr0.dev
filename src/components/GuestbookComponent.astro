<div class="px-6 py-16 xs:py-8">
    <h1 class="text-xl uppercase tracking-[15px] text-rp-subtle md:tracking-[20px]">Sign my guestbook</h1>
    <guestbook-element>
        <form class="relative pt-8 max-w-[500px]">
            <input aria-label="Your title" class="title pl-4 py-2 mb-2 pr-8 w-1/2 bg-rp-surface rounded-lg text-rp-text" placeholder="Your title..." type="text"/>
            <input aria-label="Your message" class="message pl-4 py-2 pr-8 w-full bg-rp-surface rounded-lg text-rp-text" placeholder="Your message..." type="text"/>
            <button class="absolute px-4 py-1 bottom-1 right-1 bg-rp-overlay rounded-lg" type="submit">Sign</button>
        </form>
    </guestbook-element>
</div>

<script>
    type CommentProp = {
        author: string
        comment: string
    }
    class Comment extends HTMLElement {

        constructor () {
            super();
        }

        connectedCallback() {
            if (this.dataset.props) {
                const props: CommentProp = JSON.parse(this.dataset.props);
                const div = document.createElement("div");
                div.className = "w-full pt-4 text-sm break-words";
                const span = document.createElement("span");
                span.className = "text-rp-text mr-1";
                span.textContent = `${props.author}: ${props.comment}`;
                div.append(span);
                this.append(div);
            }
        }

    }

    class GuestbookElement extends HTMLElement {

        constructor() {
            super();
        }
    
        connectedCallback() {
            const btn = this.querySelector("button");
            const title = this.querySelector(".title") as HTMLInputElement;
            const message = this.querySelector(".message") as HTMLInputElement;

            btn?.addEventListener("click", event => {
                event.preventDefault();
                if (title !== null && message !== null) {
                    // supabase.from("comments").insert({ author: title.value, comment: message.value }).then(response => {
                    //     console.log(response);
                    // });
                }
            });

            
            // supabase.channel("any").on(
            //     "postgres_changes",
            //     { event: "INSERT", schema: "public", table: "comments" },
            //     payload => {
            //         const newComment = payload.new;
            //         const commentElement = document.createElement("comment-element");
            //         commentElement.dataset.props = JSON.stringify({ author: newComment.author, comment: newComment.comment });
            //         this.firstElementChild?.insertAdjacentElement("afterend", commentElement);
            //     }
            // ).subscribe();

            // supabase.from("comments").select().then((response) => {
            //     const comments = response.data;
            //     if (comments !== null) {
            //         for (const comment of comments) {
            //             const commentElement = document.createElement("comment-element");
            //             commentElement.dataset.props = JSON.stringify({ author: comment.author, comment: comment.comment });
            //             this.append(commentElement);
            //         }
            //     }
            // });
        }
    }

    customElements.define("guestbook-element", GuestbookElement);
    customElements.define("comment-element", Comment);
</script>
